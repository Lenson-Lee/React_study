{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_study\\\\react-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport TOC from './components/TOC';\nimport ReadContent from './components/ReadContent';\nimport Subject from './components/Subject';\nimport Control from './components/Control';\nimport CreateContent from './components/CreateContent';\nimport UpdateContent from './components/UpdateContent';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.max_content_id = 3; //마지막 컨텐트의 아이디와 같아야 한다.\n    //state의 값으로 하지 않은 이유는 어떤 데이터를\n    //push할 때 아이디값을 정할때만 사용할 뿐 ui에\n    //영향을 줄 이유가 없어서 state로 불필요한 렌더링 제외\n\n    this.state = {\n      mode: 'create',\n      selected_content_id: 2,\n      //contents의 id에 따라 본문에 나오도록.\n      subject: {\n        title: 'WEB',\n        sub: 'world wide web!'\n      },\n      //타이틀이 welcome일 때의 텍스트\n      welcome: {\n        title: 'Welcome',\n        desc: 'Hello, React!!'\n      },\n      contents: [{\n        id: 1,\n        title: 'HTML',\n        desc: 'HTML is HyperText'\n      }, {\n        id: 2,\n        title: 'CSS',\n        desc: 'CSS is for design'\n      }, {\n        id: 3,\n        title: 'JavaScript',\n        desc: 'JS is for interactive'\n      }]\n    };\n  }\n\n  getReadContent() {\n    var i = 0; //var data = 배열 contents의 i번째 state를 뜻함\n    //i번째 state의 id값이 2이면 CSS, CSS is for design이 나온다.\n\n    while (i < this.state.contents.length) {\n      var data = this.state.contents[i];\n\n      if (data.id === this.state.selected_content_id) {\n        return data;\n        break;\n      }\n\n      i++;\n    }\n  }\n\n  getContent() {\n    var _title,\n        _desc,\n        _article = null;\n\n    if (this.state.mode === 'welcome') {\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n      _article = /*#__PURE__*/_jsxDEV(ReadContent, {\n        title: _title,\n        desc: _desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 18\n      }, this);\n    } else if (this.state.mode === 'read') {\n      var _content = this.getReadContent();\n\n      _article = /*#__PURE__*/_jsxDEV(ReadContent, {\n        title: _content.title,\n        desc: _content.desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 18\n      }, this);\n    } else if (this.state.mode === 'create') {\n      _article = /*#__PURE__*/_jsxDEV(CreateContent, {\n        onSubmit: function (_title, _desc) {\n          // add content to this.state.contents\n          this.max_content_id++; // 이 코드는 오리지널 state인 contents를 바꾼다. 새로운 변수에 concat한 데이터를 담아서 쓰기\n          // this.state.contents.push({id:this.max_content_id, title: _title, desc: _desc});\n\n          var _contents = this.state.contents.concat({\n            id: this.max_content_id,\n            title: _title,\n            desc: _desc\n          });\n\n          this.setState({\n            contents: _contents\n          });\n          console.log(_title, _desc);\n        }.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 18\n      }, this);\n    } else if (this.state.mode === 'update') {\n      _content = this.getReadContent();\n      _article = /*#__PURE__*/_jsxDEV(UpdateContent, {\n        data: _content,\n        onSubmit: function (_id, _title, _desc) {\n          //this.state.contents를 복사한 새로운 배열\n          var _contents = Array.from(this.state.contents);\n\n          var i = 0;\n\n          while (i < _contents.length) {\n            if (_contents[i].id === _id) {\n              _contents[i] = {\n                id: _id,\n                title: _title,\n                desc: _desc\n              };\n              break;\n            }\n\n            i++;\n          }\n\n          this.setState({\n            contents: _contents\n          });\n          console.log(_title, _desc);\n        }.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 18\n      }, this);\n    }\n\n    return _article;\n  } //render() : 어떤 HTML을 그릴 것인지 결정하는 함수\n\n\n  render() {\n    console.log('App render'); //mode의 값에 따라서 만들어지는 컴포넌트(render)의 결과가 바뀌도록 조건을 생성\n    //<Content title = {_title}\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Subject, {\n        title: this.state.subject.title,\n        sub: this.state.subject.sub // Subject.js 에서 쓸 onChangePage함수를 만들었다.\n        ,\n        onChangePage: function () {\n          // alert(\"hihihi\");\n          this.setState({\n            mode: 'welcome'\n          });\n        }.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(TOC, {\n        onChangePage: function (id) {\n          // debugger;\n          this.setState({\n            mode: 'read',\n            // id가 숫자가 아닌 문자인 경우를 대비해 JS코드 Number(id)로 형변환?\n            selected_content_id: Number(id)\n          });\n        }.bind(this),\n        data: this.state.contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Control, {\n        onChangeMode: function (_mode) {\n          this.setState({\n            mode: _mode\n          });\n        }.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }, this), this.getContent()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/react_study/react-app/src/App.js"],"names":["React","Component","TOC","ReadContent","Subject","Control","CreateContent","UpdateContent","App","constructor","props","max_content_id","state","mode","selected_content_id","subject","title","sub","welcome","desc","contents","id","getReadContent","i","length","data","getContent","_title","_desc","_article","_content","_contents","concat","setState","console","log","bind","_id","Array","from","render","Number","_mode"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAO,WAAP;;;AAGA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAC1BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,cAAL,GAAsB,CAAtB,CAFiB,CAEO;AACA;AACA;AACA;;AACxB,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAC,QADM;AAEXC,MAAAA,mBAAmB,EAAC,CAFT;AAEa;AACxBC,MAAAA,OAAO,EAAC;AACNC,QAAAA,KAAK,EAAC,KADA;AACOC,QAAAA,GAAG,EAAC;AADX,OAHG;AAMX;AACAC,MAAAA,OAAO,EAAC;AAACF,QAAAA,KAAK,EAAC,SAAP;AAAkBG,QAAAA,IAAI,EAAC;AAAvB,OAPG;AAQXC,MAAAA,QAAQ,EAAC,CACP;AAACC,QAAAA,EAAE,EAAC,CAAJ;AAAOL,QAAAA,KAAK,EAAC,MAAb;AAAqBG,QAAAA,IAAI,EAAC;AAA1B,OADO,EAEP;AAACE,QAAAA,EAAE,EAAC,CAAJ;AAAOL,QAAAA,KAAK,EAAC,KAAb;AAAoBG,QAAAA,IAAI,EAAC;AAAzB,OAFO,EAGP;AAACE,QAAAA,EAAE,EAAC,CAAJ;AAAOL,QAAAA,KAAK,EAAC,YAAb;AAA2BG,QAAAA,IAAI,EAAC;AAAhC,OAHO;AARE,KAAb;AAcD;;AAEDG,EAAAA,cAAc,GAAE;AACd,QAAIC,CAAC,GAAG,CAAR,CADc,CAEb;AACC;;AACA,WAAMA,CAAC,GAAG,KAAKX,KAAL,CAAWQ,QAAX,CAAoBI,MAA9B,EAAqC;AACnC,UAAIC,IAAI,GAAG,KAAKb,KAAL,CAAWQ,QAAX,CAAoBG,CAApB,CAAX;;AACA,UAAGE,IAAI,CAACJ,EAAL,KAAY,KAAKT,KAAL,CAAWE,mBAA1B,EAA+C;AAC7C,eAAOW,IAAP;AACA;AACD;;AACDF,MAAAA,CAAC;AACF;AACJ;;AACDG,EAAAA,UAAU,GAAE;AACV,QAAIC,MAAJ;AAAA,QAAYC,KAAZ;AAAA,QAAmBC,QAAQ,GAAG,IAA9B;;AAEA,QAAI,KAAKjB,KAAL,CAAWC,IAAX,KAAoB,SAAxB,EAAmC;AACjCc,MAAAA,MAAM,GAAG,KAAKf,KAAL,CAAWM,OAAX,CAAmBF,KAA5B;AACAY,MAAAA,KAAK,GAAG,KAAKhB,KAAL,CAAWM,OAAX,CAAmBC,IAA3B;AACAU,MAAAA,QAAQ,gBAAG,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEF,MAApB;AAA4B,QAAA,IAAI,EAAEC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAAX;AAED,KALD,MAKO,IAAI,KAAKhB,KAAL,CAAWC,IAAX,KAAoB,MAAxB,EAAgC;AACrC,UAAIiB,QAAQ,GAAG,KAAKR,cAAL,EAAf;;AACAO,MAAAA,QAAQ,gBAAG,QAAC,WAAD;AAAa,QAAA,KAAK,EAAEC,QAAQ,CAACd,KAA7B;AAAoC,QAAA,IAAI,EAAEc,QAAQ,CAACX;AAAnD;AAAA;AAAA;AAAA;AAAA,cAAX;AAED,KAJM,MAIA,IAAG,KAAKP,KAAL,CAAWC,IAAX,KAAoB,QAAvB,EAAiC;AACtCgB,MAAAA,QAAQ,gBAAG,QAAC,aAAD;AAAe,QAAA,QAAQ,EAAE,UAASF,MAAT,EAAiBC,KAAjB,EAAuB;AACzD;AACA,eAAKjB,cAAL,GAFyD,CAIzD;AACA;;AACA,cAAIoB,SAAS,GAAG,KAAKnB,KAAL,CAAWQ,QAAX,CAAoBY,MAApB,CACd;AAACX,YAAAA,EAAE,EAAC,KAAKV,cAAT;AAAyBK,YAAAA,KAAK,EAAEW,MAAhC;AAAwCR,YAAAA,IAAI,EAAES;AAA9C,WADc,CAAhB;;AAGA,eAAKK,QAAL,CAAc;AACZb,YAAAA,QAAQ,EAACW;AADG,WAAd;AAGAG,UAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ,EAAoBC,KAApB;AACD,SAbmC,CAalCQ,IAbkC,CAa7B,IAb6B;AAAzB;AAAA;AAAA;AAAA;AAAA,cAAX;AAeD,KAhBM,MAgBA,IAAG,KAAKxB,KAAL,CAAWC,IAAX,KAAoB,QAAvB,EAAiC;AACtCiB,MAAAA,QAAQ,GAAG,KAAKR,cAAL,EAAX;AACAO,MAAAA,QAAQ,gBAAG,QAAC,aAAD;AAAe,QAAA,IAAI,EAAEC,QAArB;AAA+B,QAAA,QAAQ,EAChD,UAASO,GAAT,EAAcV,MAAd,EAAsBC,KAAtB,EAA4B;AAC1B;AACA,cAAIG,SAAS,GAAGO,KAAK,CAACC,IAAN,CAAW,KAAK3B,KAAL,CAAWQ,QAAtB,CAAhB;;AACA,cAAIG,CAAC,GAAG,CAAR;;AACA,iBAAMA,CAAC,GAAGQ,SAAS,CAACP,MAApB,EAA4B;AAC1B,gBAAGO,SAAS,CAACR,CAAD,CAAT,CAAaF,EAAb,KAAoBgB,GAAvB,EAA4B;AAC1BN,cAAAA,SAAS,CAACR,CAAD,CAAT,GAAe;AAACF,gBAAAA,EAAE,EAAEgB,GAAL;AAAUrB,gBAAAA,KAAK,EAAEW,MAAjB;AAAyBR,gBAAAA,IAAI,EAAES;AAA/B,eAAf;AACA;AACD;;AACDL,YAAAA,CAAC;AACF;;AACD,eAAKU,QAAL,CAAc;AACZb,YAAAA,QAAQ,EAACW;AADG,WAAd;AAGAG,UAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ,EAAoBC,KAApB;AACD,SAfD,CAeEQ,IAfF,CAeO,IAfP;AADS;AAAA;AAAA;AAAA;AAAA,cAAX;AAiBD;;AACD,WAAOP,QAAP;AACD,GArFyB,CAsF1B;;;AACAW,EAAAA,MAAM,GAAG;AACPN,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADO,CAEP;AACA;;AAEF,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,OAAD;AACE,QAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWG,OAAX,CAAmBC,KAD5B;AAEE,QAAA,GAAG,EAAE,KAAKJ,KAAL,CAAWG,OAAX,CAAmBE,GAF1B,CAGE;AAHF;AAIE,QAAA,YAAY,EAAG,YAAW;AACxB;AACA,eAAKgB,QAAL,CAAc;AAACpB,YAAAA,IAAI,EAAC;AAAN,WAAd;AACD,SAHc,CAGbuB,IAHa,CAGR,IAHQ;AAJjB;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,GAAD;AACE,QAAA,YAAY,EAAE,UAASf,EAAT,EAAY;AACxB;AACA,eAAKY,QAAL,CAAc;AACZpB,YAAAA,IAAI,EAAC,MADO;AAEZ;AACAC,YAAAA,mBAAmB,EAAE2B,MAAM,CAACpB,EAAD;AAHf,WAAd;AAKD,SAPa,CAOZe,IAPY,CAOP,IAPO,CADhB;AASE,QAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWQ;AATnB;AAAA;AAAA;AAAA;AAAA,cAXF,eAuBE,QAAC,OAAD;AAAS,QAAA,YAAY,EAAE,UAASsB,KAAT,EAAe;AACpC,eAAKT,QAAL,CAAc;AACZpB,YAAAA,IAAI,EAAC6B;AADO,WAAd;AAGD,SAJsB,CAIrBN,IAJqB,CAIhB,IAJgB;AAAvB;AAAA;AAAA;AAAA;AAAA,cAvBF,EA8BG,KAAKV,UAAL,EA9BH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAkCD;;AA9H2B;;AAiI5B,eAAelB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport TOC from './components/TOC';\nimport ReadContent from './components/ReadContent';\nimport Subject from './components/Subject';\nimport Control from './components/Control';\nimport CreateContent from './components/CreateContent';\nimport UpdateContent from './components/UpdateContent';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.max_content_id = 3;//마지막 컨텐트의 아이디와 같아야 한다.\n                            //state의 값으로 하지 않은 이유는 어떤 데이터를\n                            //push할 때 아이디값을 정할때만 사용할 뿐 ui에\n                            //영향을 줄 이유가 없어서 state로 불필요한 렌더링 제외\n    this.state = {\n      mode:'create',\n      selected_content_id:2,  //contents의 id에 따라 본문에 나오도록.\n      subject:{\n        title:'WEB', sub:'world wide web!'\n      },\n      //타이틀이 welcome일 때의 텍스트\n      welcome:{title:'Welcome', desc:'Hello, React!!'},\n      contents:[\n        {id:1, title:'HTML', desc:'HTML is HyperText'},\n        {id:2, title:'CSS', desc:'CSS is for design'},\n        {id:3, title:'JavaScript', desc:'JS is for interactive'}\n      ]\n    }\n  }\n\n  getReadContent(){\n    var i = 0;\n     //var data = 배열 contents의 i번째 state를 뜻함\n      //i번째 state의 id값이 2이면 CSS, CSS is for design이 나온다.\n      while(i < this.state.contents.length){\n        var data = this.state.contents[i];\n        if(data.id === this.state.selected_content_id) {\n          return data;\n          break;\n        }\n        i++;\n      }\n  }\n  getContent(){\n    var _title, _desc, _article = null;\n    \n    if (this.state.mode === 'welcome') {\n      _title = this.state.welcome.title;\n      _desc = this.state.welcome.desc;\n      _article = <ReadContent title={_title} desc={_desc}></ReadContent>\n\n    } else if (this.state.mode === 'read') {\n      var _content = this.getReadContent();\n      _article = <ReadContent title={_content.title} desc={_content.desc}></ReadContent>\n\n    } else if(this.state.mode === 'create') {\n      _article = <CreateContent onSubmit={function(_title, _desc){\n        // add content to this.state.contents\n        this.max_content_id++;\n        \n        // 이 코드는 오리지널 state인 contents를 바꾼다. 새로운 변수에 concat한 데이터를 담아서 쓰기\n        // this.state.contents.push({id:this.max_content_id, title: _title, desc: _desc});\n        var _contents = this.state.contents.concat(\n          {id:this.max_content_id, title: _title, desc: _desc}\n        )\n        this.setState({\n          contents:_contents\n        })\n        console.log(_title, _desc);\n      }.bind(this)}></CreateContent>\n\n    } else if(this.state.mode === 'update') {\n      _content = this.getReadContent();\n      _article = <UpdateContent data={_content} onSubmit={\n        function(_id, _title, _desc){\n          //this.state.contents를 복사한 새로운 배열\n          var _contents = Array.from(this.state.contents);\n          var i = 0;\n          while(i < _contents.length) {\n            if(_contents[i].id === _id) {\n              _contents[i] = {id: _id, title: _title, desc: _desc}\n              break;\n            }\n            i++;\n          }\n          this.setState({\n            contents:_contents\n          })\n          console.log(_title, _desc);\n        }.bind(this)}></UpdateContent>\n    }\n    return _article;\n  }\n  //render() : 어떤 HTML을 그릴 것인지 결정하는 함수\n  render() {\n    console.log('App render');\n    //mode의 값에 따라서 만들어지는 컴포넌트(render)의 결과가 바뀌도록 조건을 생성\n    //<Content title = {_title}\n  \n  return (\n    <div className=\"App\">\n      <Subject\n        title={this.state.subject.title}\n        sub={this.state.subject.sub}\n        // Subject.js 에서 쓸 onChangePage함수를 만들었다.\n        onChangePage ={function (){\n          // alert(\"hihihi\");\n          this.setState({mode:'welcome'})\n        }.bind(this)}\n      ></Subject>\n\n      <TOC \n        onChangePage={function(id){\n          // debugger;\n          this.setState({\n            mode:'read',\n            // id가 숫자가 아닌 문자인 경우를 대비해 JS코드 Number(id)로 형변환?\n            selected_content_id: Number(id)\n          });\n        }.bind(this)}\n        data={this.state.contents}\n        ></TOC>\n\n      <Control onChangeMode={function(_mode){\n        this.setState({\n          mode:_mode\n        });\n      }.bind(this)}\n      ></Control>\n\n      {this.getContent()}\n    </div>\n  );\n}\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}